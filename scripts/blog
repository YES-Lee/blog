#! /usr/bin/env node

/**
 * 从scaffold创建一篇文章
 * new <post|draft> <title>
 */

const commander = require('commander')
const path = require('path')
const fs = require('fs')
const Inquirer = require('inquirer')
const exec = require('child_process').exec

commander
  .version('0.0.2')

commander
  .command('new')
  .description('新建文章')
  .action(() => {
    Inquirer.prompt([
      {
        type: 'input',
        name: 'title',
        message: '请输入文章标题:'
      },
      {
        type: 'input',
        name: 'slug',
        message: '请输入slug'
      }
    ]).then(ans => {
      const timestemp = new Date().toISOString()
      const postDir = path.resolve(process.cwd(), `source/drafts/${ans.slug}`)
      const templatePath = path.resolve(process.cwd(), 'scaffold/draft.md')
      const destination = path.join(postDir, `${ans.slug}.md`)
      const template = fs.readFileSync(templatePath, { encoding: 'utf-8' })
      if (!fs.existsSync(postDir)) {
        fs.mkdirSync(postDir)
      }
      const tpl = template
        .replace(/\{\{TITLE\}\}/g, ans.title)
        .replace(/\{\{TIMESTEMP\}\}/g, timestemp)
        .replace(/\{\{SLUG\}\}/g, ans.slug)
      fs.writeFileSync(destination, tpl)
    })
  })

commander
  .command('publish')
  .description('发布文章')
  .action(() => {
    const postList = []
    const slugs = fs.readdirSync(path.resolve(__dirname, '../source/drafts')).filter(s => !s.startsWith('.'))
    if (slugs.length === 0) {
      console.log('没有需要发布的文章')
      return
    }
    for (const slug of slugs) {
      const content = fs.readFileSync(path.resolve(__dirname, `../source/drafts/${slug}/${slug}.md`), { encoding: 'utf-8' })
      const titleReg = /title:.*\n/
      const titleMatch = content.match(titleReg)[0]
      if (titleMatch) {
        const tt = titleMatch.split(':')[1].trim()
        postList.push({
          name: tt,
          value: slug
        })
      }
    }
    Inquirer.prompt([
      {
        type: 'list',
        name: 'post',
        message: '选择要发布的文章：',
        choices: postList
      }
    ]).then(ans => {
      if (ans.post) {
        exec(`mv ${path.resolve(__dirname, '../source/drafts/' + ans.post)} ${path.resolve(__dirname, '../source/posts/')}`)
      }
    })
  })

commander
  .command('unpublish')
  .description('取消发布文章')
  .action(() => {
    const postList = []
    const slugs = fs.readdirSync(path.resolve(__dirname, '../source/posts')).filter(s => !s.startsWith('.'))
    if (slugs.length === 0) {
      console.log('没有已发布的文章')
      return
    }
    for (const slug of slugs) {
      const content = fs.readFileSync(path.resolve(__dirname, `../source/posts/${slug}/${slug}.md`), { encoding: 'utf-8' })
      const titleReg = /title:.*\n/
      const titleMatch = content.match(titleReg)[0]
      if (titleMatch) {
        const tt = titleMatch.split(':')[1].trim()
        postList.push({
          name: tt,
          value: slug
        })
      }
    }
    Inquirer.prompt([
      {
        type: 'list',
        name: 'post',
        message: '选择要取消发布的文章：',
        choices: postList
      }
    ]).then(ans => {
      if (ans.post) {
        exec(`mv ${path.resolve(__dirname, '../source/posts/' + ans.post)} ${path.resolve(__dirname, '../source/drafts/')}`)
      }
    })
  })

commander.parse(process.argv)

if (!commander.args || !commander.args.length) {
  commander.help()
}
